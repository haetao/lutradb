package io.lutra.server.mysql.packet;

/**
 * Packet网址:http://dev.mysql.com/doc/internals/en/connection-phase-packets.html#packet-Protocol::HandshakeResponse
 * Fields
 * capability_flags (4) -- capability flags of the client as defined in Protocol::CapabilityFlags
 *
 * max_packet_size (4) -- max size of a command packet that the client wants to send to the server
 *
 * character_set (1) -- connection's default character set as defined in Protocol::CharacterSet.
 *
 * username (string.fix_len) -- name of the SQL account which client wants to log in -- this string should be interpreted using the character set indicated by character set field.
 *
 * auth-response (string.NUL) -- opaque authentication response data generated by Authentication Method indicated by the plugin name field.
 *
 * database (string.NUL) -- initail database for the connection -- this string should be interpreted using the character set indicated by character set field.
 *
 * auth plugin name (string.NUL) -- the Authentication Method used by the client to generate auth-response value in this packet. This is an UTF-8 string.
 */
import io.lutra.server.mysql.Message;
import io.lutra.server.mysql.util.ByteBufUtil;
import io.lutra.server.mysql.util.TypesTransUtil;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class AuthPacket extends MySqlPacket {

    private int capabilityFlags; //4bytes
    private int maxPacketSize; //4bytes
    private int characterSet; //1byte
    private String username; //String<lenenc>
    private String authResponse; //string<NUL>
    private String database; //String<NUL>
    private String authPluginName; //String<NUL>

    @Override
    public void read(byte[] data) {
        try {
            Message message = new Message(data);
            setPacketLength(message.readUB3());
            setPacketNumber(message.readUB1());
            capabilityFlags = message.readUB4();
            maxPacketSize = message.readUB4();
            characterSet = message.readUB1();
            username = message.readStringLen();
            authResponse = message.readStringNul();
            database = message.readStringNul();
            authPluginName = message.readStringNul();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    @Override
    public void write(ByteBuf byteBuf) {
        byteBuf = Unpooled.buffer(getPacketLength()+HEAD_LENGTH);
        ByteBufUtil.writeUB3(byteBuf,getPacketLength());
        ByteBufUtil.writeByte(byteBuf,getPacketNumber());
        ByteBufUtil.writeInt(byteBuf,capabilityFlags);
        ByteBufUtil.writeInt(byteBuf,maxPacketSize);
        ByteBufUtil.writeByte(byteBuf,characterSet);
        ByteBufUtil.writeStringLen(byteBuf,username);
        ByteBufUtil.writeStringNul(byteBuf,authResponse);
        ByteBufUtil.writeStringNul(byteBuf,database);
        ByteBufUtil.writeStringNul(byteBuf,authPluginName);
    }

    @Override
    public int calcSize() {
        int size = 9;
        size += username.length();
        size += authResponse.length();
        size += authPluginName.length();
        size += database.length();
        return size;
    }
}
